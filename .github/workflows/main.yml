name: Crear imagen, realizar pruebas unitarias y desplegar en ACI (automatizado)

on:
  push:
    branches:
      - main

env:
  AZURE_CONTAINER_REGISTRY: topicosregistry2.azurecr.io
  AZURE_RESOURCE_GROUP: topicos-rg
  AZURE_ACI_NAME: api-topicos-container

jobs:
  crear-testear-desplegar:
    runs-on: ubuntu-latest

    steps:
    - name: Descargar código
      uses: actions/checkout@v4

    # Autenticarse en Azure usando la Entidad de Servicio
    - name: Autenticarse en Azure
      uses: azure/login@v1
      with:
        creds: ${{ secrets.AZURE_CREDENTIALS }} # Usa el secreto de GitHub con el JSON de tu Entidad de Servicio

    # ----- PRUEBAS UNITARIAS (OPCIONAL) -----
    - name: Instalar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Instalar dependencias de Python
      run: |
        pip install -r requirements.txt
        pip install pytest

    - name: Ejecutar pruebas unitarias
      env:
        DB_CONNECTION_STRING: "dummy_connection_string" # Solo para las pruebas
      run: |
        echo "--- Ejecutando pruebas unitarias (Python) ---"
        pytest || exit 1
        echo "Pruebas unitarias finalizadas."
    # ----------------------------------------

    # ----- CONSTRUCCIÓN Y SUBIDA DE IMAGEN A ACR -----
    - name: Conectarse a ACR
      run: |
        # Autenticación en ACR usando las credenciales de administrador (desde secretos)
        echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ env.AZURE_CONTAINER_REGISTRY }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

    - name: Crear y hacerle push a la imagen Docker hacia el ACR
      run: |
        # Construye la imagen Docker desde tu Dockerfile en la raíz del repo
        docker build . -t ${{ env.AZURE_CONTAINER_REGISTRY }}/api-topicos:latest
        # Sube la imagen construida a tu ACR
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/api-topicos:latest

    # ----- DESPLIEGUE AUTOMATIZADO EN ACI -----
    - name: Desplegar/Actualizar instancia ACI
      id: deploy-aci # Añadimos un ID para poder referenciar la salida
      run: |
        echo "--- Eliminando instancia ACI existente (si la hay) ---"
        # El '|| true' asegura que el pipeline no falle si la instancia no existe
        az container delete \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_ACI_NAME }} \
          --yes || true

        echo "--- Creando/Actualizando instancia ACI con la nueva imagen ---"
        az container create \
          --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \
          --name ${{ env.AZURE_ACI_NAME }} \
          --image ${{ env.AZURE_CONTAINER_REGISTRY }}/api-topicos:latest \
          --dns-name-label myflaskapp-uni2 \
          --ports 80 \
          --os-type Linux \
          --cpu 1 \
          --memory 1.5 \
          --secure-environment-variables DB_CONNECTION_STRING="${{ secrets.ACR_SQL_DB_CONNECTION_STRING }}" \
          --registry-login-server ${{ env.AZURE_CONTAINER_REGISTRY }} \
          --registry-username ${{ secrets.ACR_USERNAME }} \
          --registry-password ${{ secrets.ACR_PASSWORD }}

        echo "--- Despliegue de ACI completado. Recuperando FQDN ---"
        # Recupera el FQDN de la instancia de ACI recién creada
        ACI_FQDN=$(az container show --resource-group ${{ env.AZURE_RESOURCE_GROUP }} --name ${{ env.AZURE_ACI_NAME }} --query "ipAddress.fqdn" -o tsv)
        echo "¡Tu aplicación estará disponible en: http://$ACI_FQDN"
        echo "aci_url=http://$ACI_FQDN" >> $GITHUB_OUTPUT # Exportar la URL para pasos posteriores

    # Mostrar la URL de la aplicación al final del Workflow
    - name: Mostrar URL de la aplicación desplegada
      run: echo '¡Tu aplicación está disponible en ${{ steps.deploy-aci.outputs.aci_url }}'
      if: success()
