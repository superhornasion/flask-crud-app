name: Build, Test (Unit), and Deploy to ACI (Semi-Automated)

on:
  push:
    branches:
      - main # Este pipeline se ejecutará con cada push a la rama 'main'

env:
  AZURE_CONTAINER_REGISTRY: topicosregistry.azurecr.io
  AZURE_RESOURCE_GROUP: topicos-rg
  AZURE_ACI_NAME: api-topicos-container

jobs:
  build-test-deploy:
    runs-on: ubuntu-latest # El sistema operativo donde se ejecutará el pipeline

    steps:
    - name: Descargar código
      uses: actions/checkout@v4 # Paso para descargar tu código del repositorio

    # ----- PRUEBAS UNITARIAS (OPCIONAL) -----
    # Este bloque asume que tus pruebas son solo de Python y no necesitan la base de datos o Docker
    - name: Instalar Python
      uses: actions/setup-python@v5
      with:
        python-version: '3.9'

    - name: Instalar dependencias de Python
      run: |
        pip install -r requirements.txt
        pip install pytest

    - name: Ejecutar pruebas unitarias
      env:
        DB_CONNECTION_STRING: "dummy_connection_string"
      run: |
        echo "--- Ejecutando pruebas unitarias (Python) ---"
        pytest || exit 1
        echo "Pruebas unitarias finalizadas."
    # ----------------------------------------

    # ----- CONSTRUCCIÓN Y SUBIDA DE IMAGEN A ACR -----
    - name: Conectarse a ACR
      run: |
        # Autenticación en ACR usando las credenciales de administrador (menos seguro, pero evita AAD Service Principal)
        echo "${{ secrets.ACR_PASSWORD }}" | docker login ${{ env.AZURE_CONTAINER_REGISTRY }} -u ${{ secrets.ACR_USERNAME }} --password-stdin

    - name: Crear y hacerle push a la imagen Docker hacia el ACR
      run: |
        # Construye la imagen Docker desde tu Dockerfile en la raíz del repo
        docker build . -t ${{ env.AZURE_CONTAINER_REGISTRY }}/api-topicos:latest
        # Sube la imagen construida a tu ACR
        docker push ${{ env.AZURE_CONTAINER_REGISTRY }}/api-topicos:latest

    # ----- PASO DE DESPLIEGUE (MANUAL ASISTIDO) -----
    - name: Imprimir comandos manuales de despliegue para ACI
      run: |
        echo "--------------------------------------------------------"
        echo "¡El pipeline ha construido y subido la imagen a ACR!"
        echo "Para desplegar o actualizar tu aplicación en Azure Container Instances (ACI):"
        echo "1. Abre el Azure Cloud Shell en el portal de Azure."
        echo "2. Copia y pega los siguientes comandos UNO POR UNO en el Cloud Shell:"
        echo ""
        echo "   # --- Borrar la instancia ACI existente (si la hay) ---"
        echo "   az container delete \\"
        echo "     --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \\"
        echo "     --name ${{ env.AZURE_ACI_NAME }} \\"
        echo "     --yes || true"
        echo ""
        echo "   # --- Crear/Actualizar la instancia ACI con la nueva imagen ---"
        echo "   az container create \\"
        echo "     --resource-group ${{ env.AZURE_RESOURCE_GROUP }} \\"
        echo "     --name ${{ env.AZURE_ACI_NAME }} \\"
        echo "     --image ${{ env.AZURE_CONTAINER_REGISTRY }}/api-topicos:latest \\"
        echo "     --dns-name-label myflaskapp-uni \\"
        echo "     --ports 80 \\"
        echo "     --os-type Linux \\"
        echo "     --cpu 1 \\"
        echo "     --memory 1.5 \\"
        echo "     --environment-variables DB_CONNECTION_STRING='${{ secrets.AZURE_SQL_DB_CONNECTION_STRING }}'"
        echo "--------------------------------------------------------"
        echo "Una vez que el comando 'az container create' termine, tu aplicación estará disponible en la URL FQDN (Fully Qualified Domain Name) que aparecerá en la salida, generalmente algo como:"
        echo "http://myflaskapp-uni.eastus.azurecontainer.io/"
        echo "--------------------------------------------------------"
